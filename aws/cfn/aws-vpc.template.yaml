AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed NAT gateways in the public subnet for each Availability Zone. You can also create additional private subnets with dedicated custom network access control lists (ACLs). If you deploy the Quick Start in a region that doesnâ€™t support NAT gateways, NAT instances are deployed instead. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template. QS(0027)'
Metadata:
    'AWS::CloudFormation::Interface':
        ParameterGroups:
            - 
                Label:
                    default: Environment
                Parameters:
                    - Environment
            - 
                Label:
                    default: Availability Zone Configuration
                Parameters:
                    - AvailabilityZones
                    - NumberOfAZs
            - 
                Label:
                    default: Network Configuration
                Parameters:
                    - VPCCIDR
                    - PrivateSubnet1ACIDR
                    - PrivateSubnet2ACIDR
                    - PrivateSubnet3ACIDR
                    - PrivateSubnet4ACIDR
                    - PublicSubnet1CIDR
                    - PublicSubnet2CIDR
                    - PublicSubnet3CIDR
                    - PublicSubnet4CIDR
                    - CreateAdditionalPrivateSubnets

            - 
                Label:
                    default: Amazon EC2 Configuration
                Parameters:
                    - KeyPairName
                    - NATInstanceType
        ParameterLabels:
            AvailabilityZones:
                default: Availability Zones
            CreateAdditionalPrivateSubnets:
                default: Create additional private subnets with dedicated network ACLs
            KeyPairName:
                default: Key pair name
            NATInstanceType:
                default: NAT instance type
            NumberOfAZs:
                default: Number of Availability Zones
            PrivateSubnet1ACIDR:
                default: Private subnet 1A CIDR
            PrivateSubnet2ACIDR:
                default: Private subnet 2A CIDR
            PrivateSubnet3ACIDR:
                default: Private subnet 3A CIDR
            PrivateSubnet4ACIDR:
                default: Private subnet 4A CIDR
            PublicSubnet1CIDR:
                default: Public subnet 1 CIDR
            PublicSubnet2CIDR:
                default: Public subnet 2 CIDR
            PublicSubnet3CIDR:
                default: Public subnet 3 CIDR
            PublicSubnet4CIDR:
                default: Public subnet 4 CIDR
            VPCCIDR:
                default: VPC CIDR
Parameters:
    Environment:
        Description: Specify the environment
        Type: String
        Default: non-production
        AllowedValues:
            - non-production
            - production
    AvailabilityZones:
        Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.'
        Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    CreateAdditionalPrivateSubnets:
        AllowedValues:
            - 'true'
            - 'false'
        Default: 'false'
        Description: 'Set to true to create a network ACL protected subnet in each Availability Zone. If false, the CIDR parameters for those subnets will be ignored.'
        Type: String
    KeyPairName:
        Description: Public/private key pairs allow you to securely connect to your NAT instance after it launches. This is used only if the region does not support NAT gateways.
        Type: 'AWS::EC2::KeyPair::KeyName'
    NATInstanceType:
        AllowedValues:
            - t2.nano
            - t2.micro
            - t2.small
            - t2.medium
            - t2.large
            - m3.medium
            - m3.large
            - m4.large
        Default: t2.small
        Description: Amazon EC2 instance type for the NAT instances. This is used only if the region does not support NAT gateways.
        Type: String
    NumberOfAZs:
        AllowedValues:
            - '2'
            - '3'
            - '4'
        Default: '2'
        Description: Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.
        Type: String
    PrivateSubnet1ACIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.0.0/19
        Description: CIDR block for private subnet 1A located in Availability Zone 1
        Type: String
    PrivateSubnet2ACIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.32.0/19
        Description: CIDR block for private subnet 2A located in Availability Zone 2
        Type: String
    PrivateSubnet3ACIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.64.0/19
        Description: CIDR block for private subnet 3A located in Availability Zone 3
        Type: String
    PrivateSubnet4ACIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.96.0/19
        Description: CIDR block for private subnet 4A located in Availability Zone 4
        Type: String
    PublicSubnet1CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.128.0/20
        Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
        Type: String
    PublicSubnet2CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.144.0/20
        Description: CIDR block for the public DMZ subnet 2 located in Availability Zone 2
        Type: String
    PublicSubnet3CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.160.0/20
        Description: CIDR block for the public DMZ subnet 3 located in Availability Zone 3
        Type: String
    PublicSubnet4CIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.176.0/20
        Description: CIDR block for the public DMZ subnet 4 located in Availability Zone 4
        Type: String
    VPCCIDR:
        AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
        ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
        Default: 10.0.0.0/16
        Description: CIDR block for the VPC
        Type: String
    UseNAT:
      Description: Create NAT instances?
      Type: String
      Default: 'false'
      ConstraintDescription: Must be either true or false
      AllowedValues:
          - 'true'
          - 'false'
Mappings:
    AWSAMIRegionMap:
        AMI:
            AWSNATHVM: amzn-ami-vpc-nat-hvm-2016.03.3.x86_64-ebs
        ap-northeast-1:
            AWSNATHVM: ami-2443b745
        ap-northeast-2:
            AWSNATHVM: ami-d14388bf
        ap-south-1:
            AWSNATHVM: ami-e2b9d38d
        ap-southeast-1:
            AWSNATHVM: ami-a79b49c4
        ap-southeast-2:
            AWSNATHVM: ami-53371f30
        eu-central-1:
            AWSNATHVM: ami-5825cd37
        eu-west-1:
            AWSNATHVM: ami-a8dd45db
        sa-east-1:
            AWSNATHVM: ami-9336bcff
        us-east-1:
            AWSNATHVM: ami-4868ab25
        us-west-1:
            AWSNATHVM: ami-004b0f60
        us-west-2:
            AWSNATHVM: ami-a275b1c2
    AWSInfoRegionMap:
        ap-northeast-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        ap-northeast-2:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        ap-south-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        ap-southeast-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        ap-southeast-2:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        eu-central-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        eu-west-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        sa-east-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        us-east-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        us-gov-west-1:
            Partition: aws-us-gov
            QuickStartS3URL: 'https://s3-us-gov-west-1.amazonaws.com'
        us-west-1:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
        us-west-2:
            Partition: aws
            QuickStartS3URL: 'https://s3.amazonaws.com'
Conditions:
    UseNATCondition:
      'Fn::Equals':
          - !Ref UseNAT
          - 'true'      
    3AZCondition:
      'Fn::Or':
          - 'Fn::Equals':
              - !Ref NumberOfAZs
              - '3'
          - Condition: 4AZCondition
    4AZCondition:
      'Fn::Equals':
          - !Ref NumberOfAZs
          - '4'
    'UseNAT&3AZCondition':
        'Fn::And':
            - Condition: UseNATCondition
            - Condition: 3AZCondition

    'UseNAT&4AZCondition':
        'Fn::And':
            - Condition: UseNATCondition
            - Condition: 4AZCondition
    AdditionalPrivateSubnetsCondition:
      'Fn::Equals':
          - !Ref CreateAdditionalPrivateSubnets
          - 'true'

    'AdditionalPrivateSubnets&3AZCondition':
        'Fn::And':
            - Condition: AdditionalPrivateSubnetsCondition
            - Condition: 3AZCondition

    'AdditionalPrivateSubnets&4AZCondition':
        'Fn::And':
            - Condition: AdditionalPrivateSubnetsCondition
            - Condition: 4AZCondition

    NATInstanceCondition:
      'Fn::Or':
        - 'Fn::Equals':
            - !Ref 'AWS::Region'
            - sa-east-1
        - 'Fn::Equals':
            - !Ref 'AWS::Region'
            - us-gov-west-1
        - 'Fn::Equals':
            - !Ref 'AWS::Region'
            - cn-north-1
    NATGatewayCondition:
      'Fn::Not':
        - Condition: NATInstanceCondition

    'UseNAT&NATGatewayCondition':
      'Fn::Not':
        - 'Fn::And':
            - Condition: NATGatewayCondition
            - Condition: UseNATCondition
            
    'NATInstance&3AZCondition':
      'Fn::And':
        - Condition: NATInstanceCondition
        - Condition: 3AZCondition
        - Condition: UseNATCondition
    'NATInstance&4AZCondition':
      'Fn::And':
        - Condition: NATInstanceCondition
        - Condition: 4AZCondition
        - Condition: UseNATCondition
    'NATGateway&3AZCondition':
      'Fn::And':
        - Condition: NATGatewayCondition
        - Condition: 3AZCondition
        - Condition: UseNATCondition
    'NATGateway&4AZCondition':
      'Fn::And':
        - Condition: NATGatewayCondition
        - Condition: 4AZCondition
        - Condition: UseNATCondition        
    VPCEndpointCondition:
      'Fn::Not':
        - 'Fn::Or':
          - 'Fn::Equals':
              - !Ref 'AWS::Region'
              - us-gov-west-1
          - 'Fn::Equals':
              - !Ref 'AWS::Region'
              - cn-north-1
Resources:
    DHCPOptions:
        Type: 'AWS::EC2::DHCPOptions'
        Properties:
            DomainNameServers:
                - AmazonProvidedDNS
    VPC:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock:
                !Ref VPCCIDR
            EnableDnsSupport: 'true'
            EnableDnsHostnames: 'true'
            Tags:
                - 
                    Key: Name
                    Value:
                        !Ref 'AWS::StackName'
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    VPCDHCPOptionsAssociation:
        Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
        Properties:
            VpcId:
                !Ref VPC
            DhcpOptionsId:
                !Ref DHCPOptions
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    VPCGatewayAttachment:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            VpcId:
                !Ref VPC
            InternetGatewayId:
                !Ref InternetGateway
    PrivateSubnet1A:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PrivateSubnet1ACIDR
            AvailabilityZone:
                'Fn::Select':
                    - '0'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet2A:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PrivateSubnet2ACIDR
            AvailabilityZone:
                'Fn::Select':
                    - '1'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet3A:
        Condition: 3AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PrivateSubnet3ACIDR
            AvailabilityZone:
                'Fn::Select':
                    - '2'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet4A:
        Condition: 4AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PrivateSubnet4ACIDR
            AvailabilityZone:
                'Fn::Select':
                    - '3'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PublicSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PublicSubnet1CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '0'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 1
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            MapPublicIpOnLaunch: true
    PublicSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PublicSubnet2CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '1'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 2
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            MapPublicIpOnLaunch: true
    PublicSubnet3:
        Condition: 3AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PublicSubnet3CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '2'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 3
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            MapPublicIpOnLaunch: true
    PublicSubnet4:
        Condition: 4AZCondition
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId:
                !Ref VPC
            CidrBlock:
                !Ref PublicSubnet4CIDR
            AvailabilityZone:
                'Fn::Select':
                    - '3'
                    - 
                        !Ref AvailabilityZones
            Tags:
                - 
                    Key: Name
                    Value: Public subnet 4
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            MapPublicIpOnLaunch: true
    PrivateSubnet1ARouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 1A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet1ARoute:
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                !Ref PrivateSubnet1ARouteTable
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref NATInstance1
                    - 
                        !Ref 'AWS::NoValue'
            NatGatewayId:
                'Fn::If':
                    - NATGatewayCondition
                    - 
                        !Ref NATGateway1
                    - 
                        !Ref 'AWS::NoValue'
    PrivateSubnet1ARouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PrivateSubnet1A
            RouteTableId:
                !Ref PrivateSubnet1ARouteTable
    PrivateSubnet2ARouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 2A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet2ARoute:
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                !Ref PrivateSubnet2ARouteTable
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref NATInstance2
                    - 
                        !Ref 'AWS::NoValue'
            NatGatewayId:
                'Fn::If':
                    - NATGatewayCondition
                    - 
                        !Ref NATGateway2
                    - 
                        !Ref 'AWS::NoValue'
    PrivateSubnet2ARouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PrivateSubnet2A
            RouteTableId:
                !Ref PrivateSubnet2ARouteTable
    PrivateSubnet3ARouteTable:
        Condition: 3AZCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 3A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet3ARoute:
        Condition: UseNAT&3AZCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                !Ref PrivateSubnet3ARouteTable
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance3
                    - !Ref 'AWS::NoValue'
            NatGatewayId:
                'Fn::If':
                    - NATGatewayCondition
                    - !Ref NATGateway3
                    - !Ref 'AWS::NoValue'

    PrivateSubnet3ARouteTableAssociation:
        Condition: 3AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PrivateSubnet3A
            RouteTableId:
                !Ref PrivateSubnet3ARouteTable
    PrivateSubnet4ARouteTable:
        Condition: 4AZCondition
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: Private subnet 4A
                - 
                    Key: Network
                    Value: Private
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PrivateSubnet4ARoute:
        Condition: UseNAT&4AZCondition
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                !Ref PrivateSubnet4ARouteTable
            DestinationCidrBlock: 0.0.0.0/0
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance4
                    - !Ref 'AWS::NoValue'
            NatGatewayId:
                'Fn::If':
                    - NATGatewayCondition
                    - !Ref NATGateway4
                    - !Ref 'AWS::NoValue'
    PrivateSubnet4ARouteTableAssociation:
        Condition: 4AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PrivateSubnet4A
            RouteTableId:
                !Ref PrivateSubnet4ARouteTable
    PublicSubnetRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId:
                !Ref VPC
            Tags:
                - 
                    Key: Name
                    Value: Public Subnets
                - 
                    Key: Network
                    Value: Public
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
    PublicSubnetRoute:
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Route'
        Properties:
            RouteTableId:
                !Ref PublicSubnetRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                !Ref InternetGateway
    PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PublicSubnet1
            RouteTableId:
                !Ref PublicSubnetRouteTable
    PublicSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PublicSubnet2
            RouteTableId:
                !Ref PublicSubnetRouteTable
    PublicSubnet3RouteTableAssociation:
        Condition: 3AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PublicSubnet3
            RouteTableId:
                !Ref PublicSubnetRouteTable
    PublicSubnet4RouteTableAssociation:
        Condition: 4AZCondition
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            SubnetId:
                !Ref PublicSubnet4
            RouteTableId:
                !Ref PublicSubnetRouteTable
    NAT1EIP:
        Condition: 'UseNAT&NATGatewayCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance1
                    - !Ref 'AWS::NoValue'
    NAT2EIP:
        Condition: 'UseNAT&NATGatewayCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance2
                    - !Ref 'AWS::NoValue'
    NAT3EIP:
        Condition: 'UseNAT&3AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance3
                    - !Ref 'AWS::NoValue'
    NAT4EIP:
        Condition: 'UseNAT&4AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc
            InstanceId:
                'Fn::If':
                    - NATInstanceCondition
                    - !Ref NATInstance4
                    - !Ref 'AWS::NoValue'
    NATGateway1:
        Condition: 'UseNAT&NATGatewayCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT1EIP
                    - AllocationId
            SubnetId:
                !Ref PublicSubnet1
    NATGateway2:
        Condition: 'UseNAT&NATGatewayCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT2EIP
                    - AllocationId
            SubnetId:
                !Ref PublicSubnet2
    NATGateway3:
        Condition: 'NATGateway&3AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT3EIP
                    - AllocationId
            SubnetId:
                !Ref PublicSubnet3
    NATGateway4:
        Condition: 'NATGateway&4AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::NatGateway'
        Properties:
            AllocationId:
                'Fn::GetAtt':
                    - NAT4EIP
                    - AllocationId
            SubnetId:
                !Ref PublicSubnet4
    NATInstance1:
        Condition: NATInstanceCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSAMIRegionMap
                    - 
                        !Ref 'AWS::Region'
                    - AWSNATHVM
            InstanceType:
                !Ref NATInstanceType
            Tags:
                - 
                    Key: Name
                    Value: NAT1
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            NetworkInterfaces:
                - 
                    GroupSet:
                        - 
                            !Ref NATInstanceSecurityGroup
                    AssociatePublicIpAddress: 'true'
                    DeviceIndex: '0'
                    DeleteOnTermination: 'true'
                    SubnetId:
                        !Ref PublicSubnet1
            KeyName:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref KeyPairName
                    - 
                        !Ref 'AWS::NoValue'
            SourceDestCheck: 'false'
    NATInstance2:
        Condition: NATInstanceCondition
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSAMIRegionMap
                    - 
                        !Ref 'AWS::Region'
                    - AWSNATHVM
            InstanceType:
                !Ref NATInstanceType
            Tags:
                - 
                    Key: Name
                    Value: NAT2
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            NetworkInterfaces:
                - 
                    GroupSet:
                        - 
                            !Ref NATInstanceSecurityGroup
                    AssociatePublicIpAddress: 'true'
                    DeviceIndex: '0'
                    DeleteOnTermination: 'true'
                    SubnetId:
                        !Ref PublicSubnet2
            KeyName:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref KeyPairName
                    - 
                        !Ref 'AWS::NoValue'
            SourceDestCheck: 'false'
    NATInstance3:
        Condition: 'NATInstance&3AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSAMIRegionMap
                    - 
                        !Ref 'AWS::Region'
                    - AWSNATHVM
            InstanceType:
                !Ref NATInstanceType
            Tags:
                - 
                    Key: Name
                    Value: NAT3
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            NetworkInterfaces:
                - 
                    GroupSet:
                        - 
                            !Ref NATInstanceSecurityGroup
                    AssociatePublicIpAddress: 'true'
                    DeviceIndex: '0'
                    DeleteOnTermination: 'true'
                    SubnetId:
                        !Ref PublicSubnet3
            KeyName:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref KeyPairName
                    - 
                        !Ref 'AWS::NoValue'
            SourceDestCheck: 'false'
    NATInstance4:
        Condition: 'NATInstance&4AZCondition'
        DependsOn: VPCGatewayAttachment
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId:
                'Fn::FindInMap':
                    - AWSAMIRegionMap
                    - 
                        !Ref 'AWS::Region'
                    - AWSNATHVM
            InstanceType:
                !Ref NATInstanceType
            Tags:
                - 
                    Key: Name
                    Value: NAT4
                - 
                    Key: Environment
                    Value:
                        !Ref Environment
            NetworkInterfaces:
                - 
                    GroupSet:
                        - 
                            !Ref NATInstanceSecurityGroup
                    AssociatePublicIpAddress: 'true'
                    DeviceIndex: '0'
                    DeleteOnTermination: 'true'
                    SubnetId:
                        !Ref PublicSubnet4
            KeyName:
                'Fn::If':
                    - NATInstanceCondition
                    - 
                        !Ref KeyPairName
                    - 
                        !Ref 'AWS::NoValue'
            SourceDestCheck: 'false'
    NATInstanceSecurityGroup:
        Condition: NATInstanceCondition
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enables outbound internet access for the VPC via the NAT instances
            VpcId:
                !Ref VPC
            SecurityGroupIngress:
                - 
                    IpProtocol: '-1'
                    FromPort: '1'
                    ToPort: '65535'
                    CidrIp:
                        !Ref VPCCIDR
    S3Endpoint:
        Condition: VPCEndpointCondition
        Type: 'AWS::EC2::VPCEndpoint'
        Properties:
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - 
                        Action: '*'
                        Effect: Allow
                        Resource: '*'
                        Principal: '*'
            RouteTableIds:
                - 
                    !Ref PrivateSubnet1ARouteTable
                - 
                    !Ref PrivateSubnet2ARouteTable
                - 
                    'Fn::If':
                        - 3AZCondition
                        - 
                            !Ref PrivateSubnet3ARouteTable
                        - 
                            !Ref 'AWS::NoValue'
                - 
                    'Fn::If':
                        - 4AZCondition
                        - 
                            !Ref PrivateSubnet4ARouteTable
                        - 
                            !Ref 'AWS::NoValue'
            ServiceName:
                'Fn::Join':
                    - ''
                    - 
                        - com.amazonaws.
                        - 
                            !Ref 'AWS::Region'
                        - .s3
            VpcId:
                !Ref VPC
    SNSEventsInformational:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName:
                'Fn::Join':
                    - '-'
                    - 
                        - 
                            !Ref Environment
                        - information-topic
    SNSEventsAlert:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName:
                'Fn::Join':
                    - '-'
                    - 
                        - 
                            !Ref Environment
                        - alert-topic
    SNSEventsEscalation:
        Type: 'AWS::SNS::Topic'
        Properties:
            DisplayName:
                'Fn::Join':
                    - '-'
                    - 
                        - 
                            !Ref Environment
                        - escalation-topic
Outputs:
    SNSEventsInformationalTopicArn:
        Description: ARN for the Informational Events SNS topic
        Value:
            !Ref SNSEventsInformational
    SNSEventsAlertTopicArn:
        Description: ARN for the Alert Events SNS topic
        Value:
            !Ref SNSEventsAlert
    SNSEventsEscalationTopicArn:
        Description: ARN for the Escalation Events SNS topic
        Value:
            !Ref SNSEventsEscalation
    PrivateSubnet1ACIDR:
        Description: Private subnet 1A CIDR in Availability Zone 1
        Value:
            !Ref PrivateSubnet1ACIDR
    PrivateSubnet1AID:
        Description: Private subnet 1A ID in Availability Zone 1
        Value:
            !Ref PrivateSubnet1A
    PrivateSubnet2ACIDR:
        Description: Private subnet 2A CIDR in Availability Zone 2
        Value:
            !Ref PrivateSubnet2ACIDR
    PrivateSubnet2AID:
        Description: Private subnet 2A ID in Availability Zone 2
        Value:
            !Ref PrivateSubnet2A
    PrivateSubnet3ACIDR:
        Condition: 3AZCondition
        Description: Private subnet 3A CIDR in Availability Zone 3
        Value:
            !Ref PrivateSubnet3ACIDR
    PrivateSubnet3AID:
        Condition: 3AZCondition
        Description: Private subnet 3A ID in Availability Zone 3
        Value:
            !Ref PrivateSubnet3A
    PrivateSubnet4ACIDR:
        Condition: 4AZCondition
        Description: Private subnet 4A CIDR in Availability Zone 4
        Value:
            !Ref PrivateSubnet4ACIDR
    PrivateSubnet4AID:
        Condition: 4AZCondition
        Description: Private subnet 4A ID in Availability Zone 4
        Value:
            !Ref PrivateSubnet4A
    PublicSubnet1CIDR:
        Description: Public subnet 1 CIDR in Availability Zone 1
        Value:
            !Ref PublicSubnet1CIDR
    PublicSubnet1ID:
        Description: Public subnet 1 ID in Availability Zone 1
        Value:
            !Ref PublicSubnet1
    PublicSubnet2CIDR:
        Description: Public subnet 2 CIDR in Availability Zone 2
        Value:
            !Ref PublicSubnet2CIDR
    PublicSubnet2ID:
        Description: Public subnet 2 ID in Availability Zone 2
        Value:
            !Ref PublicSubnet2
    PublicSubnet3CIDR:
        Condition: 3AZCondition
        Description: Public subnet 3 CIDR in Availability Zone 3
        Value:
            !Ref PublicSubnet3CIDR
    PublicSubnet3ID:
        Condition: 3AZCondition
        Description: Public subnet 3 ID in Availability Zone 3
        Value:
            !Ref PublicSubnet3
    PublicSubnet4CIDR:
        Condition: 4AZCondition
        Description: Public subnet 4 CIDR in Availability Zone 4
        Value:
            !Ref PublicSubnet4CIDR
    PublicSubnet4ID:
        Condition: 4AZCondition
        Description: Public subnet 4 ID in Availability Zone 4
        Value:
            !Ref PublicSubnet4
    VPCCIDR:
        Value:
            !Ref VPCCIDR
        Description: VPC CIDR
    VPCID:
        Value:
            !Ref VPC
        Description: VPC ID
